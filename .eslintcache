[{"/Users/alex/Desktop/Projects/mad-libzz/src/index.js":"1","/Users/alex/Desktop/Projects/mad-libzz/src/App.js":"2"},{"size":218,"mtime":1609165910000,"results":"3","hashOfConfig":"4"},{"size":1185,"mtime":1609637754000,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"jasw72",{"filePath":"9","messages":"10","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"/Users/alex/Desktop/Projects/mad-libzz/src/index.js",[],["12","13"],"/Users/alex/Desktop/Projects/mad-libzz/src/App.js",["14","15","16"],"import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [ blanks, setBlanks ] = useState([])\n  const [ values, setValues ] = useState([])\n  const [ newValues, setNewValues ] = useState([])\n\n  useEffect(async () => {\n    const res = await fetch('http://madlibz.herokuapp.com/api/random?minlength=5&maxlength=15%27');\n    const data = await res.json();\n    console.log(data);\n    setBlanks(data.blanks)\n    setValues(data.value)\n  }, []);\n\n  const handleValueChange = (event) => {\n    console.log(setNewValues(event.target.value))\n  }\n\n  return (\n    <div className=\"app\">\n    <div className=\"header\">Madlibzz Game</div>\n      {blanks.map((blank, i) =>\n        <div className=\"input-group\" key={i}>\n          <div className=\"wordTypeText\">\n          {blank}\n          </div>\n          <span>\n          <input onChange={handleValueChange} placeholder={`Enter ${blank}`} type=\"text\"/>\n          </span>\n        </div>\n        )}\n        <div className=\"submitButton\">Submit</div>\n    </div>\n  );\n}\n\nexport default App;\n\n// store onChange in state\n// third state called values, track everything that's changed in the input and store it in the state",{"ruleId":"17","replacedBy":"18"},{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","severity":1,"message":"22","line":6,"column":11,"nodeType":"23","messageId":"24","endLine":6,"endColumn":17},{"ruleId":"21","severity":1,"message":"25","line":7,"column":11,"nodeType":"23","messageId":"24","endLine":7,"endColumn":20},{"ruleId":"26","severity":1,"message":"27","line":9,"column":13,"nodeType":"28","endLine":15,"endColumn":4},"no-native-reassign",["29"],"no-negated-in-lhs",["30"],"no-unused-vars","'values' is assigned a value but never used.","Identifier","unusedVar","'newValues' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","no-global-assign","no-unsafe-negation"]